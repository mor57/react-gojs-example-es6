{"version":3,"sources":["logo.svg","Components/DiagramButtons.js","Helpers/ColorHelper.js","Components/SelectionDetails.js","Components/MyDiagram.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DiagramButton","_ref","onInit","onUpdateColor","onAddNode","react_default","a","createElement","className","type","onClick","colors","getRandomColor","Math","floor","random","length","SelectionDetails","selectedNodes","message","reduce","result","current","MyDiagram","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","nodeId","createDiagram","bind","assertThisInitialized","modelChangeHandler","initModelHandler","updateColorHandler","nodeSelectionHandler","removeNode","removeLink","addNode","updateNodeText","onTextEdited","state","selectedNodeKeys","model","nodeDataArray","key","label","color","linkDataArray","Components_DiagramButtons","Components_SelectionDetails","dist","diagramId","onModelChange","setState","objectSpread","from","to","updatedNodes","map","node","_this2","$","go","make","myDiagram","initialContentAlignment","LeftCenter","layout","angle","arrangement","ArrangementVertical","treeStyle","StyleLayered","isReadOnly","allowHorizontalScroll","allowVerticalScroll","allowZoom","allowSelect","autoScale","Diagram","Uniform","contentAlignment","TextEdited","toolManager","panningTool","isEnabled","mouseWheelBehavior","ToolManager","WheelScroll","nodeTemplate","selectionChanged","isSelected","strokeWidth","margin","editable","event","eventType","ModelChangeEventType","Remove","nodeData","linkData","newNodeId","linksToAdd","parent","toConsumableArray","concat","nodeKey","nodeToRemoveIndex","findIndex","slice","linKToRemove","linkToRemoveIndex","link","text","nodeToUpdateIndex","nodeIndexToRemove","e","tb","subject","part","React","Component","App","src","logo","alt","src_Components_MyDiagram","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7bc7ee65.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './DiagramButtons.css';\n\nconst DiagramButton = ({ onInit, onUpdateColor, onAddNode }) => {\n    return (\n        <div className=\"centered-container\">\n            <div className=\"inline-element\">\n                <button type=\"button\" onClick={onInit}>\n                    Init diagram\n                </button>\n            </div>\n            <div className=\"inline-element\">\n                <button type=\"button\" onClick={onUpdateColor}>\n                    Update node color\n                </button>\n            </div>\n            <div className=\"inline-element\" onClick={onAddNode}>\n                <button type=\"button\">Add node with selected node(s) as parent(s)</button>\n            </div>\n        </div>\n    );\n};\n\nexport default DiagramButton;\n","const colors = ['lightblue', 'orange', 'lightgreen', 'pink', 'yellow', 'red', 'grey', 'magenta', 'cyan'];\n\nexport const getRandomColor = () => {\n    return colors[Math.floor(Math.random() * colors.length)];\n};\n","import React from 'react';\n\nconst SelectionDetails = ({ selectedNodes }) => {\n    const message = selectedNodes.reduce((result, current) => result + ' ' + current, '');\n    return <div>{selectedNodes.length === 0 ? 'No selection' : 'Selection: ' + message}</div>;\n};\n\nexport default SelectionDetails;\n","import React from 'react';\nimport * as go from 'gojs';\nimport { ToolManager, Diagram } from 'gojs';\nimport { GojsDiagram, ModelChangeEventType } from 'react-gojs';\nimport DiagramButtons from './DiagramButtons';\nimport './MyDiagram.css';\nimport { getRandomColor } from '../Helpers/ColorHelper';\nimport SelectionDetails from './SelectionDetails';\n\nclass MyDiagram extends React.Component {\n    nodeId = 0;\n\n    constructor(props) {\n        super(props);\n        this.createDiagram = this.createDiagram.bind(this);\n        this.modelChangeHandler = this.modelChangeHandler.bind(this);\n        this.initModelHandler = this.initModelHandler.bind(this);\n        this.updateColorHandler = this.updateColorHandler.bind(this);\n        this.nodeSelectionHandler = this.nodeSelectionHandler.bind(this);\n        this.removeNode = this.removeNode.bind(this);\n        this.removeLink = this.removeLink.bind(this);\n        this.addNode = this.addNode.bind(this);\n        this.updateNodeText = this.updateNodeText.bind(this);\n        this.onTextEdited = this.onTextEdited.bind(this);\n        this.state = {\n            selectedNodeKeys: [],\n            model: {\n                nodeDataArray: [{ key: 'Alpha', label: 'Alpha', color: 'lightblue' }],\n                linkDataArray: []\n            }\n        };\n    }\n\n    render() {\n        return [\n            <DiagramButtons\n                key=\"diagramButtons\"\n                onInit={this.initModelHandler}\n                onUpdateColor={this.updateColorHandler}\n                onAddNode={this.addNode}\n            />,\n            <SelectionDetails key=\"selectionDetails\" selectedNodes={this.state.selectedNodeKeys} />,\n            <GojsDiagram\n                key=\"gojsDiagram\"\n                diagramId=\"myDiagramDiv\"\n                model={this.state.model}\n                createDiagram={this.createDiagram}\n                className=\"myDiagram\"\n                onModelChange={this.modelChangeHandler}\n            />\n        ];\n    }\n\n    initModelHandler() {\n        this.setState({\n            ...this.state,\n            model: {\n                nodeDataArray: [\n                    { key: 'Alpha', label: 'Alpha', color: 'lightblue' },\n                    { key: 'Beta', label: 'Beta', color: 'orange' },\n                    { key: 'Gamma', label: 'Gamma', color: 'lightgreen' },\n                    { key: 'Delta', label: 'Delta', color: 'pink' },\n                    { key: 'Omega', label: 'Omega', color: 'grey' }\n                ],\n                linkDataArray: [\n                    { from: 'Alpha', to: 'Beta' },\n                    { from: 'Alpha', to: 'Gamma' },\n                    { from: 'Beta', to: 'Delta' },\n                    { from: 'Gamma', to: 'Omega' }\n                ]\n            }\n        });\n    }\n\n    updateColorHandler() {\n        const updatedNodes = this.state.model.nodeDataArray.map(node => {\n            return {\n                ...node,\n                color: getRandomColor()\n            };\n        });\n\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                nodeDataArray: updatedNodes\n            }\n        });\n    }\n\n    createDiagram(diagramId: string) {\n        const $ = go.GraphObject.make;\n\n        const myDiagram = $(go.Diagram, diagramId, {\n            initialContentAlignment: go.Spot.LeftCenter,\n            layout: $(go.TreeLayout, {\n                angle: 0,\n                arrangement: go.TreeLayout.ArrangementVertical,\n                treeStyle: go.TreeLayout.StyleLayered\n            }),\n            isReadOnly: false,\n            allowHorizontalScroll: true,\n            allowVerticalScroll: true,\n            allowZoom: false,\n            allowSelect: true,\n            autoScale: Diagram.Uniform,\n            contentAlignment: go.Spot.LeftCenter,\n            TextEdited: this.onTextEdited\n        });\n\n        myDiagram.toolManager.panningTool.isEnabled = false;\n        myDiagram.toolManager.mouseWheelBehavior = ToolManager.WheelScroll;\n\n        myDiagram.nodeTemplate = $(\n            go.Node,\n            'Auto',\n            {\n                selectionChanged: node => this.nodeSelectionHandler(node.key, node.isSelected)\n            },\n            $(go.Shape, 'RoundedRectangle', { strokeWidth: 0 }, new go.Binding('fill', 'color')),\n            $(go.TextBlock, { margin: 8, editable: true }, new go.Binding('text', 'label'))\n        );\n\n        return myDiagram;\n    }\n\n    modelChangeHandler(event) {\n        switch (event.eventType) {\n            case ModelChangeEventType.Remove:\n                if (event.nodeData) {\n                    this.removeNode(event.nodeData.key);\n                }\n                if (event.linkData) {\n                    this.removeLink(event.linkData);\n                }\n                break;\n            default:\n                break;\n        }\n    }\n\n    addNode() {\n        const newNodeId = 'node' + this.nodeId;\n        const linksToAdd = this.state.selectedNodeKeys.map(parent => {\n            return { from: parent, to: newNodeId };\n        });\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                nodeDataArray: [\n                    ...this.state.model.nodeDataArray,\n                    { key: newNodeId, label: newNodeId, color: getRandomColor() }\n                ],\n                linkDataArray:\n                    linksToAdd.length > 0\n                        ? [...this.state.model.linkDataArray].concat(linksToAdd)\n                        : [...this.state.model.linkDataArray]\n            }\n        });\n        this.nodeId += 1;\n    }\n\n    removeNode(nodeKey) {\n        const nodeToRemoveIndex = this.state.model.nodeDataArray.findIndex(node => node.key === nodeKey);\n        if (nodeToRemoveIndex === -1) {\n            return;\n        }\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                nodeDataArray: [\n                    ...this.state.model.nodeDataArray.slice(0, nodeToRemoveIndex),\n                    ...this.state.model.nodeDataArray.slice(nodeToRemoveIndex + 1)\n                ]\n            }\n        });\n    }\n\n    removeLink(linKToRemove) {\n        const linkToRemoveIndex = this.state.model.linkDataArray.findIndex(\n            link => link.from === linKToRemove.from && link.to === linKToRemove.to\n        );\n        if (linkToRemoveIndex === -1) {\n            return;\n        }\n        return {\n            ...this.state,\n            model: {\n                ...this.state.model,\n                linkDataArray: [\n                    ...this.state.model.linkDataArray.slice(0, linkToRemoveIndex),\n                    ...this.state.model.linkDataArray.slice(linkToRemoveIndex + 1)\n                ]\n            }\n        };\n    }\n\n    updateNodeText(nodeKey, text) {\n        const nodeToUpdateIndex = this.state.model.nodeDataArray.findIndex(node => node.key === nodeKey);\n        if (nodeToUpdateIndex === -1) {\n            return;\n        }\n        this.setState({\n            ...this.state,\n            model: {\n                ...this.state.model,\n                nodeDataArray: [\n                    ...this.state.model.nodeDataArray.slice(0, nodeToUpdateIndex),\n                    {\n                        ...this.state.model.nodeDataArray[nodeToUpdateIndex],\n                        label: text\n                    },\n                    ...this.state.model.nodeDataArray.slice(nodeToUpdateIndex + 1)\n                ]\n            }\n        });\n    }\n\n    nodeSelectionHandler(nodeKey, isSelected) {\n        if (isSelected) {\n            this.setState({\n                ...this.state,\n                selectedNodeKeys: [...this.state.selectedNodeKeys, nodeKey]\n            });\n        } else {\n            const nodeIndexToRemove = this.state.selectedNodeKeys.findIndex(key => key === nodeKey);\n            if (nodeIndexToRemove === -1) {\n                return;\n            }\n            this.setState({\n                ...this.state,\n                selectedNodeKeys: [\n                    ...this.state.selectedNodeKeys.slice(0, nodeIndexToRemove),\n                    ...this.state.selectedNodeKeys.slice(nodeIndexToRemove + 1)\n                ]\n            });\n        }\n    }\n\n    onTextEdited(e) {\n        const tb = e.subject;\n        if (tb === null) {\n            return;\n        }\n        const node = tb.part;\n        if (node instanceof go.Node) {\n            this.updateNodeText(node.key, tb.text);\n        }\n    }\n}\n\nexport default MyDiagram;\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport MyDiagram from './Components/MyDiagram';\nimport './App.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h1 className=\"App-title\">react-gojs example in es6</h1>\n                </header>\n                <MyDiagram />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Lets check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n                    );\n                });\n            } else {\n                // Is not local host. Just register service worker\n                registerValidSW(swUrl);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the old content will have been purged and\n                            // the fresh content will have been added to the cache.\n                            // It's the perfect time to display a \"New content is\n                            // available; please refresh.\" message in your web app.\n                            console.log('New content is available; please refresh.');\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}